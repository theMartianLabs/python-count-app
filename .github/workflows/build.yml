name: Build and Deploy Docker Image

on:
  push:
    branches:
      - develop-app

jobs:
  build-and-push:
    name: Build Docker image and push to ECR using OIDC
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    outputs:
      next_version_tag: ${{ steps.next_version.outputs.tag }}

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActions

################################################################
###               SONAR CLOUD SCAN                           ###
### Drops the build if any bugs or vulnerabilities are found.###
###            Using the default quality gate.               ###
###        Connected to my personal Sonar Cloud account      ###
################################################################
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  

    - name: Determine Next Version
      id: next_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        if [ -z "$LATEST_TAG" ]; then
          LATEST_TAG="v0.0.0"
        fi
        NEXT_TAG=$(echo "$LATEST_TAG" | awk -F. '{print $1"."$2"."$3+1}')
        echo "tag=$NEXT_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEXT_TAG"

    - name: Create Release
      id: create_release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        RESPONSE=$(curl -s -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{\"tag_name\": \"${{ steps.next_version.outputs.tag }}\", \"name\": \"Release ${{ steps.next_version.outputs.tag }}\", \"draft\": false, \"prerelease\": false}")
        RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
        echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract repository name
      id: repo-name
      run: |
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Build and Push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.repo-name.outputs.repo_name }}
        IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.IMAGE_NAME }}
        args: --severity-threshold=high --policy-path=.snyk
      continue-on-error: true  # change to true if you want to allow failures

  deploy:
    name: Deploy Docker image to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActionsDeploy

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: python-count-app
        IMAGE_TAG: ${{ needs.build-and-push.outputs.next_version_tag }}
      run: |
        echo "$EC2_SSH_KEY" > ssh_key.pem
        chmod 600 ssh_key.pem

        ssh -o StrictHostKeyChecking=no -i ssh_key.pem $EC2_USER@$EC2_HOST << 'EOF'
          export AWS_DEFAULT_REGION=eu-west-1
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker stop python-count-app || true
          docker rm python-count-app || true
          docker run -d --name python-count-app \
            -p 8080:8080 \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker image prune -f
        EOF

        rm -f ssh_key.pem
